package Exerc;
import java.util.Scanner;

public class E_Teste {
	static int[] embaralharVetor(int vect[], int numTrocas) {
		
		for(int i = 0; i < numTrocas; i++) {
			int indice_1 = (int) (Math.random()*vect.length);
			int indice_2 = (int) (Math.random()*vect.length);
			
			int aux_indx_1 = vect[indice_1];
			int aux_indx_2 = vect[indice_2];
			
			vect[indice_1] = aux_indx_2;
			vect[indice_2] = aux_indx_1;
			
		}
		return vect;
		
	}
	
	static int[] criarVetorOrdenado(int numElementos) {
		int vect[] = new int[numElementos];
		for(int i = 0; i < numElementos; i++ ) {
			vect[i] = i;
		}
		return vect;
	}
	
	static int[] imprimirVect(int[] numElementos) {

		for(int i = 0; i < numElementos.length; i++ ) {
			if(i > 20) {
				System.out.println("...");
				break;
			} else {
				System.out.printf("[%d] = %d\n", i, numElementos[i]);
			}
		}
		return numElementos;
	}
	
	static int somaTotal(int vect[]) {
		int soma = 0;
		for(int i = 0; i < vect.length; i++) {
			soma += vect[i];
		}
		
		return soma;
		
	}
	
	static int maiorIndice(int []vect) {
		int maior = vect[0];
		int indiceMaior = 0;
		for(int i = 1; i < vect.length; i++) {
			if(vect[i] > maior) {
				maior = vect[i];
				indiceMaior = i;
			}
		}
		
		return indiceMaior;
	}
	
	static int menorIndice(int []vect) {
		int menor = vect[0];
		int indiceMenor = 0;
		for(int i = 1; i < vect.length; i++) {
			if(vect[i] < menor) {
				menor = vect[i];
				indiceMenor = i;
			}
		}
		
		return indiceMenor;
	}
	
	static int procuraLinear(int []vect, int num) {
		int posicao = 0;
		for(int i = 0; i <vect.length; i++) {
			if(vect[i] == num) {
				return posicao = i;
			}
		}
		
		return -1;
	}
	
	static int procuraBinaria(int []vect, int num) {
		boolean encontrado = false;
		int esq = 0;
		int dir = vect.length-1;
		int meio = 0;
		for(int i = 0; i < vect.length; i++) {
			if(esq <= dir && !encontrado) {
				meio = (esq + dir)/2;
				
				if(vect[meio] == num) {
					encontrado = true;
				} else if(vect[meio] < num) {
					esq = meio +1;
				} else {
					dir = meio -1;
				}
			}
		}
		if(!encontrado) {
			return -1;
		}
		return meio;
	}
	
	static int[] ordenacaoPorSelecao(int []vect){
		for(int i = 0; i < vect.length-1; i++) {
			int min = i;
			for(int k = i + 1; k < vect.length; k++) {
				if(vect[min] > vect[k]) {
					min = k;
				}
				
				int aux = vect[min];
				vect[min] = vect[i];
				vect[i] = aux;
			}
		}
		return vect;
	}
	
	static void ordenacaoPorInsercao(int []vect) {
		for(int i = 1; i < vect.length; i++) {
			int x = vect[i];
			int j = i;
			
			while(j > 0 && vect[j-1] > x) {
				vect[j] = vect[j-1];
				j--; // por que???
			}
			
			vect[j] = x;
		}
	}
	
	static void ordenacaoPorPermutacao(int []vect) {
		boolean ordenado = false;
		for(int i = 0; i <= vect.length-1 && !ordenado; i++) {
			ordenado = true;
			
			for(int j = vect.length-1; j > i; j--) {
				if(vect[j-1] > vect[j]) {
					int aux = vect[j-1];
					vect[j-1] = vect[j];
					vect[j] = aux;
					ordenado = false;
				}
			}
		}
	}
	
	public static void main(String[] args) {
//		int[] vetOrd = criarVetorOrdenado(10);
//		imprimirVect(vetOrd);
//		int[] embaralharVe = embaralharVetor(vetOrd, 5);
//		imprimirVect(embaralharVe);
//		int[] vetOrdSoma = criarVetorOrdenado(5);
		
//		int reSoma = somaTotal(vetOrdSoma);
//		System.out.println(reSoma);
//		imprimirVect(embaralharVe);
//		System.out.println(menorIndice(embaralharVe));
		
		
		System.out.println("----------- EMBARALHAR VETOR -----------");
		int[] vetOrdLinear = criarVetorOrdenado(20);
		int [] embaralharVetLine = embaralharVetor(vetOrdLinear, 50);
		imprimirVect(embaralharVetLine);
		
		System.out.println("----------- PROCURA LINEAR -----------");
		Scanner input = new Scanner(System.in);
		System.out.println("Digite um numero para procurar: ");
		int numeroAProcurar = input.nextInt();
		System.out.println(procuraLinear(embaralharVetLine, numeroAProcurar));
		
		int []vetorOrdenadoBinario = criarVetorOrdenado(10);
		System.out.println("----------- PROCURA BINARIO -----------");
		imprimirVect(vetorOrdenadoBinario);
		System.out.println("Digite um numero para procurar: ");
		int numeroAProcurar1 = input.nextInt();
		System.out.println(procuraBinaria(vetorOrdenadoBinario, numeroAProcurar1));
		
		System.out.println("----------- VETOR ORDENADO POR SELECAO -----------");
		int []vectSelecao = criarVetorOrdenado(5);
		int []embVect = embaralharVetor(vectSelecao, 50);
		imprimirVect(embVect);
		System.out.println("\n\n	");
		ordenacaoPorSelecao(embVect);
		imprimirVect(embVect);
		System.out.println("\n\n");
		
		int []vectOrdenacao = criarVetorOrdenado(6);
		int []embOrd = embaralharVetor(vectOrdenacao, 50);
		System.out.println("----------- VETOR ORDENADO POR INSERCAO -----------");
		imprimirVect(embOrd);
		System.out.println("\n\n");
		ordenacaoPorInsercao(vectOrdenacao);
		imprimirVect(embOrd);
		
		int []vectPerm = criarVetorOrdenado(21);
		int []embPerm = embaralharVetor(vectPerm, 50);
		System.out.println("----------- VETOR ORDENADO POR PERMUTACAO -----------");
		imprimirVect(embPerm);
		System.out.println("\n\n");
		ordenacaoPorPermutacao(embPerm);
		imprimirVect(embPerm);
	}
}
